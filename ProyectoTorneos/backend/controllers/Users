const express = require("express");
const { matchedData } = require("express-validator");
const bcrypt = require("bcrypt");
const router = express.Router();
const mysql = require("mysql");
const conection = require("../connection");
const { handleHttpError } = require('../utils/handleError')
const { verifyToken } = require("../utils/handleJwt");
const { tokenSign } = require("../utils/handleJwt");
const { User } = require("../models/models");
const { Tournament, Team,Activity } = require("../models/models");
const { Op } = require("sequelize");

require("dotenv").config();
db = conection;

const createUser = async (req, res) => {
  let name = req.body.name;
  let email = req.body.email;
  let nickname = req.body.nickname;
  let sport = req.body.sport;
  let schedule = req.body.schedule;
  let password = req.body.password;
  let conf_password = req.body.conf_password;


//se comprueba que el mail sea del dominio de u-tad
  if (!(email.includes("@u-tad.com") || email.includes("@live.u-tad.com")))
    return res.send("Necesitas un correo corporativo de U-Tad");
//que las contraseñas sean igules
  if (password != conf_password)
    return res.send("¡Las contraseñas no coinciden!");
//se hashea la contraseña 
  let hashedPassword = await bcrypt.hash(req.body.password, 10);
//se crea el usuario o se encuentra
  const [user, created] = await User.findOrCreate({
    where: {
      [Op.or]: [{ email: email }, { nickname: nickname }],
    },
    defaults: {
      name: name,
      email: email,
      nickname: nickname,
      sport: sport,
      schedule: schedule,
      role: 0,
      password: hashedPassword,
      profilePic: "https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png"
    },
  });
//si no se ha podido crear el usuario ya existe y por lo tanto no se crea 
  if (!created) return res.send("User already registered");

  // se crea el token 
  const token = await tokenSign(nickname);
  res.send(`¡User created! token: ${JSON.stringify(token)}`);
};

const login = async (req, res) => {
  let username = req.body.username;
  let password = req.body.password;
  
  //se busca un registro en el que conicida el nickname o el email
  const user = await User.findOne({
    where: {
      [Op.or]: [{ email: username }, { nickname: username }],
    },
  });
  
  //si no se ha encontrado user se deuvleve error
  if (user === null) return res.status(400).send("User or Password incorrect");

  let hashedPassword = user.password;
  
  //se comparan las contraseñas hasheadas
  const match = await bcrypt.compare(password, hashedPassword);
  if (!match) return res.status(401).send("User or Password incorrect");

  //se crea el token
  const token = await tokenSign(user.nickname);
  res.status(200).send(`${username} is logged in!, Session token: ${token}`);
};


const deleteUser = async (req, res) => {
  try {
    const  nickname  = req.params.nickname;;
    var data = "";
    
    data = await User.destroy({ where: { nickname: nickname } });

    
    return res.status(200).json("usuario borrado");
  } catch (err) {
    console.log(err);
    handleHttpError(res, "ERROR_DELETE_USER");
  }
};

const getUsers = async (req, res) => {
  try {
    var data = "";
    data = await User.findAll();

    return res.status(200).json(data);
  } catch (err) {
    console.log(err); //Opcional
    //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
    handleHttpError(res, "ERROR_GET_USERS"); //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
  }
};
const getUser= async (req, res) => {

  try {
    var data = "";
    data = req.user;

    return res.status(200).json(data);
  } catch (err) {
    console.log(err); //Opcional
    //handleHttpError(res, 'ERROR_GET_ITEMS', 404)
    handleHttpError(res, "ERROR_GET_USER"); //Si nos sirve el de por defecto que hemos establecido, no es necesario pasar el 403
  }

};

const update= async (req,res)=>{

  const userId = req.user.id;

  try {
      const user = await User.findByPk(userId);
      
      if (!user) {
          return res.status(404).json({ error: 'Usuario no encontrado' });
      }

      const {
          name,
          email,
          nickname,
          sport,
          schedule,
          role,
          password,
          profilePic
      } = req.body;

      await user.update({
          name: name || user.name,
          email: email || user.email,
          nickname: nickname || user.nickname,
          sport: sport || user.sport,
          schedule: schedule || user.schedule,
          role: role || user.role,
          password: password || user.password,
          profilePic: profilePic || user.profilePic
      });

      return res.status(200).json({ message: 'Usuario actualizado correctamente', user });
  } catch (error) {
      console.error(error);
      res.status(500).json({ error: 'Error al actualizar el usuario' });
  }
};


// para administradores
const updateForAdmin= async (req,res)=>{
  const userId = req.params.id;

    try {
        const user = await User.findByPk(userId);
        
        if (!user) {
            return res.status(404).json({ error: 'Usuario no encontrado' });
        }

        const {
            name,
            email,
            nickname,
            sport,
            schedule,
            role,
            password,
            profilePic
        } = req.body;

        await user.update({
            name: name || user.name,
            email: email || user.email,
            nickname: nickname || user.nickname,
            sport: sport || user.sport,
            schedule: schedule || user.schedule,
            role: role || user.role,
            password: password || user.password,
            profilePic: profilePic || user.profilePic
        });

        return res.status(200).json({ message: 'Usuario actualizado correctamente', user });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Error al actualizar el usuario' });
    }
};

const models = {
  User,
  Tournament,
  Team,
  Activity 
};

const deleteControllerForAdmin = async (req, res) => {
  const { modelName, id } = req.params;

  let Model;
  switch (modelName) {
    case 'User':
      Model = User;
      break;
    case 'Tournament':
      Model = Tournament;
      break;
    case 'Team':
      Model = Team;
      break;
    case 'Activity':
      Model = Activity;
      break;
    default:
      return res.status(400).send({ message: 'Model not found' });
  }

  try {
    const rowsDeleted = await Model.destroy({
      where: { id: id }
    });

    if (rowsDeleted === 0) {
      return res.status(404).send({ message: 'Document not found' });
    }

    res.status(200).send({ message: 'Document deleted successfully' });
  } catch (error) {
    console.error('Error deleting document:', error);
    res.status(500).send({ message: 'Error deleting document' });
  }
};




module.exports = {deleteControllerForAdmin, createUser, login, deleteUser, getUsers,update,updateForAdmin,getUser };
